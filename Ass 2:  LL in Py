class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def add_node(self, data):
        """Add node to end of list."""
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        curr = self.head
        while curr.next:
            curr = curr.next
        curr.next = new_node

    def print_list(self):
        """Print the linked list."""
        if not self.head:
            print("List is empty.")
            return
        curr = self.head
        while curr:
            print(curr.data, end=" -> ")
            curr = curr.next
        print("None")

    def delete_nth_node(self, n):
        """Delete the nth node (1-based index)."""
        if not self.head:
            raise Exception("Cannot delete from an empty list.")

        if n <= 0:
            raise Exception("Index must be a positive integer (1-based).")

        if n == 1:
            self.head = self.head.next
            return

        curr = self.head
        for i in range(n - 2):
            if not curr.next:
                raise Exception("Index out of range.")
            curr = curr.next

        if not curr.next:
            raise Exception("Index out of range.")
        
        curr.next = curr.next.next

# Sample usage
if __name__ == "__main__":
    ll = LinkedList()
    for val in [10, 20, 30, 40, 50]:
        ll.add_node(val)

    print("Original list:")
    ll.print_list()

    try:
        ll.delete_nth_node(3)
        print("\nAfter deleting 3rd node:")
        ll.print_list()
        
        ll.delete_nth_node(10)  # This will raise an exception
    except Exception as e:
        print(f"\nError: {e}")
